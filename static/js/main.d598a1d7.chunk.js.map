{"version":3,"sources":["Editor.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["RichEditorExample","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editorState","EditorState","createEmpty","focus","refs","editor","onChange","setState","handleKeyCommand","_handleKeyCommand","bind","assertThisInitialized","mapKeyToEditorCommand","_mapKeyToEditorCommand","toggleBlockType","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","command","newState","RichUtils","e","keyCode","getDefaultKeyBinding","newEditorState","onTab","blockType","inlineStyle","className","contentState","getCurrentContent","hasText","getBlockMap","first","getType","react_default","a","createElement","Editor_BlockStyleControls","onToggle","Editor_InlineStyleControls","onClick","Draft","blockStyleFn","getBlockStyle","customStyleMap","styleMap","keyBindingFn","placeholder","ref","spellCheck","React","Component","CODE","backgroundColor","fontFamily","fontSize","padding","block","StyleButton","_this2","preventDefault","style","active","onMouseDown","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","type","Editor_StyleButton","key","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","App","Editor_RichEditorExample","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d598a1d7.chunk.js","sourcesContent":["import React from 'react'\nimport {Editor, EditorState, RichUtils, getDefaultKeyBinding} from 'draft-js'\nimport './Editor.css'\n\nexport default class RichEditorExample extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {editorState: EditorState.createEmpty()}\n    this.focus = () => this.refs.editor.focus()\n    this.onChange = editorState => this.setState({editorState})\n    this.handleKeyCommand = this._handleKeyCommand.bind(this)\n    this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this)\n    this.toggleBlockType = this._toggleBlockType.bind(this)\n    this.toggleInlineStyle = this._toggleInlineStyle.bind(this)\n  }\n  _handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command)\n    if (newState) {\n      this.onChange(newState)\n      return true\n    }\n    return false\n  }\n  _mapKeyToEditorCommand(e) {\n    if (e.keyCode === 9 /* TAB */) {\n      const newEditorState = RichUtils.onTab(e, this.state.editorState, 4 /* maxDepth */)\n      if (newEditorState !== this.state.editorState) {\n        this.onChange(newEditorState)\n      }\n      return\n    }\n    return getDefaultKeyBinding(e)\n  }\n  _toggleBlockType(blockType) {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType))\n  }\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle))\n  }\n  render() {\n    const {editorState} = this.state\n    // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n    let className = 'RichEditor-editor'\n    var contentState = editorState.getCurrentContent()\n    if (!contentState.hasText()) {\n      if (\n        contentState\n          .getBlockMap()\n          .first()\n          .getType() !== 'unstyled'\n      ) {\n        className += ' RichEditor-hidePlaceholder'\n      }\n    }\n    return (\n      <div className=\"RichEditor-root\">\n        <BlockStyleControls editorState={editorState} onToggle={this.toggleBlockType} />\n        <InlineStyleControls editorState={editorState} onToggle={this.toggleInlineStyle} />\n        <div className={className} onClick={this.focus}>\n          <Editor\n            blockStyleFn={getBlockStyle}\n            customStyleMap={styleMap}\n            editorState={editorState}\n            handleKeyCommand={this.handleKeyCommand}\n            keyBindingFn={this.mapKeyToEditorCommand}\n            onChange={this.onChange}\n            placeholder=\"Tell a story...\"\n            ref=\"editor\"\n            spellCheck={true}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2,\n  },\n}\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote'\n    default:\n      return null\n  }\n}\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super()\n    this.onToggle = e => {\n      e.preventDefault()\n      this.props.onToggle(this.props.style)\n    }\n  }\n  render() {\n    let className = 'RichEditor-styleButton'\n    if (this.props.active) {\n      className += ' RichEditor-activeButton'\n    }\n    return (\n      <span className={className} onMouseDown={this.onToggle}>\n        {this.props.label}\n      </span>\n    )\n  }\n}\n\nconst BLOCK_TYPES = [\n  {label: 'H1', style: 'header-one'},\n  {label: 'H2', style: 'header-two'},\n  {label: 'H3', style: 'header-three'},\n  {label: 'H4', style: 'header-four'},\n  {label: 'H5', style: 'header-five'},\n  {label: 'H6', style: 'header-six'},\n  {label: 'Blockquote', style: 'blockquote'},\n  {label: 'UL', style: 'unordered-list-item'},\n  {label: 'OL', style: 'ordered-list-item'},\n  {label: 'Code Block', style: 'code-block'},\n]\n\nconst BlockStyleControls = props => {\n  const {editorState} = props\n  const selection = editorState.getSelection()\n  const blockType = editorState\n    .getCurrentContent()\n    .getBlockForKey(selection.getStartKey())\n    .getType()\n  return (\n    <div className=\"RichEditor-controls\">\n      {BLOCK_TYPES.map(type => (\n        <StyleButton\n          key={type.label}\n          active={type.style === blockType}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  )\n}\n\nvar INLINE_STYLES = [\n  {label: 'Bold', style: 'BOLD'},\n  {label: 'Italic', style: 'ITALIC'},\n  {label: 'Underline', style: 'UNDERLINE'},\n  {label: 'Monospace', style: 'CODE'},\n]\n\nconst InlineStyleControls = props => {\n  const currentStyle = props.editorState.getCurrentInlineStyle()\n\n  return (\n    <div className=\"RichEditor-controls\">\n      {INLINE_STYLES.map(type => (\n        <StyleButton\n          key={type.label}\n          active={currentStyle.has(type.style)}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Editor from './Editor'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n\t\t\t\t<Editor />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}